<?php

require 'vendor/autoload.php';

use TreptowKolleg\ORM\Model\EntityManager;
use TreptowKolleg\ORM\Model\Repository;
use TreptowKolleg\ORM\ORM;

/*
 * Aufgabe 1: Erzeuge eine neue Klasse im Namespace App\Entity.
 * Überlege dir jedoch zuerst, wie die Datenbank-Relation (Tabelle) aussehen wird.
 *
 * Importiere den Namespace TreptowKolleg\ORM\ORM
 *
 * benutze folgende Attribute für deine Properties:
 *
 * Primärschlüssel:                 #[ORM\Id]
 * Auto-Increment:                  #[ORM\AutoGenerated]
 * gemappt als Tabellen-Spalte:     #[ORM\Column]
 *
 * Beispiel:
 *
 * #[ORM\Id]
 * #[ORM\AutoGenerated]
 * #[ORM\Column(type: ORM\Types::Integer)]
 * private int $myId;
 *
 * #[ORM\Column(type: ORM\Types::String, length: 50, nullable: true)]
 * private string $nickName;
 */

// MUSTERLÖSUNG
class Car {
    #[ORM\Id]
    #[ORM\AutoGenerated]
    #[ORM\Column(type: ORM\Types::Integer)]
    private int $carId;
    #[ORM\Column]
    private string $vendorName;
    #[ORM\Column(nullable: true)]
    private ?string $modelName;
    #[ORM\Column]
    private string $color;
    public function getCarId(): int
    {
        return $this->carId;
    }
    public function getVendorName(): string
    {
        return $this->vendorName;
    }
    public function setVendorName(string $vendorName): void
    {
        $this->vendorName = $vendorName;
    }
    public function getModelName(): string
    {
        return $this->modelName;
    }
    public function setModelName(string $modelName): void
    {
        $this->modelName = $modelName;
    }
    public function getColor(): string
    {
        return $this->color;
    }
    public function setColor(string $color): void
    {
        $this->color = $color;
    }
}


/*
 * Aufgabe 2: Erzeuge anhand deiner neuen Klasse eine Datenbank-Relation (Tabelle).
 * Nutze hierfür den eigens entwickelten EntityManager!
 */

// MUSTERLÖSUNG
$entityManager = new EntityManager();
$entityManager->createTable(Car::class);


/*
 * Aufgabe 3: Erzeuge mehrere neue Objekte deiner erstellten Klasse und schreibe sie in die Datenbank.
 * Nutze auch hierfür den EntityManager!
 */

// MUSTERLÖSUNG
$car1 = new Car();
$car1->setVendorName("BMW");
$car1->setModelName("i5");
$car1->setColor("Silber-Metallic");

$car2 = new Car();
$car2->setVendorName("Audi");
$car2->setModelName("Quattro");
$car2->setColor("Submarine");

$car3 = new Car();
$car3->setVendorName("VW");
$car3->setColor("Weiß");

try {
    $entityManager->persist($car1);
    $entityManager->persist($car2);
    $entityManager->persist($car3);
    $entityManager->flush();
    echo "Änderungen wurden gespeichert!\n\n";
} catch (PDOException|Error $e) {
    echo $e->getMessage()."\n";
    $entityManager->rollback();
    echo "Änderungen wurden rückgängig gemacht!\n\n";
}


/*
 * Aufgabe 4: Rufe alle Datensätze aus der Relation ab und gib sie per print_r() aus.
 */

// MUSTERLÖSUNG
$carRepository = new Repository(Car::class);
$cars = $carRepository->findAll();
print_r($cars);


/*
 * Aufgabe 5: Rufe einen Datensatz anhand eines bestimmten Kriteriums ab.
 */

// MUSTERLÖSUNG
$myCar = $carRepository->findOneBy(['vendor_name' => 'VW']);


/*
 * Aufgabe 6: Verändere die Werte dieses Datensatzes und überschreibe ihn in der Datenbank.
 */

// MUSTERLÖSUNG
if($myCar) {
    $myCar->setColor('Rosa');
    $entityManager->persist($myCar);
    $entityManager->flush();
}
